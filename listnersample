<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion></modelVersion>
	<groupId></groupId>
	<artifactId></artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<packaging>jar</packaging>
	<name>webServices</name>
	<url>http://maven.apache.org</url>
	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
	</properties>
	<dependencies>
		<!-- https://mvnrepository.com/artifact/org.slf4j/slf4j-api -->
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-simple</artifactId>
			<version>1.7.26</version>
		</dependency>
		<!-- <dependency> <groupId>com.oracle</groupId> <artifactId>ojdbc6</artifactId> 
			<version>11.2.0.3</version> </dependency> -->
		<dependency>
			<groupId>net.sourceforge.jexcelapi</groupId>
			<artifactId>jxl</artifactId>
			<version>2.6.12</version>
		</dependency>
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-api</artifactId>
			<version>1.7.26</version>
		</dependency>
		<dependency>
			<groupId>org.seleniumhq.selenium</groupId>
			<artifactId>selenium-java</artifactId>
			<version>3.141.59</version>
		</dependency>
		<dependency>
			<groupId>org.seleniumhq.selenium</groupId>
			<artifactId>htmlunit-driver</artifactId>
			<version>2.33.2</version>
		</dependency>
		<dependency>
			<groupId>org.seleniumhq.selenium</groupId>
			<artifactId>selenium-server</artifactId>
			<version>3.12.0</version>
		</dependency>
		<dependency>
			<groupId>org.testng</groupId>
			<artifactId>testng</artifactId>
			<version>6.14.3</version>
		</dependency>
		<dependency>
			<groupId>log4j</groupId>
			<artifactId>log4j</artifactId>
			<version>1.2.17</version>
		</dependency>
		<!-- https://mvnrepository.com/artifact/com.aventstack/extentreports -->
		<dependency>
			<groupId>com.aventstack</groupId>
			<artifactId>extentreports</artifactId>
			<version>3.0.7</version>
		</dependency>
		<!-- https://mvnrepository.com/artifact/org.freemarker/freemarker-gae -->
		<dependency>
			<groupId>org.freemarker</groupId>
			<artifactId>freemarker-gae</artifactId>
			<version>2.3.28</version>
		</dependency>
		<!-- https://mvnrepository.com/artifact/org.apache.poi/poi -->
		<dependency>
			<groupId>org.apache.poi</groupId>
			<artifactId>poi</artifactId>
			<version>4.1.0</version>
		</dependency>
		<!-- https://mvnrepository.com/artifact/org.apache.commons/commons-collections4 -->
		<dependency>
			<groupId>org.apache.commons</groupId>
			<artifactId>commons-collections4</artifactId>
			<version>4.3</version>
		</dependency>
		<!-- https://mvnrepository.com/artifact/org.apache.commons/commons-compress -->
		<dependency>
			<groupId>org.apache.commons</groupId>
			<artifactId>commons-compress</artifactId>
			<version>1.18</version>
		</dependency>
		<!-- https://mvnrepository.com/artifact/org.apache.xmlbeans/xmlbeans -->
		<dependency>
			<groupId>org.apache.xmlbeans</groupId>
			<artifactId>xmlbeans</artifactId>
			<version>3.1.0</version>
		</dependency>
		<!-- https://mvnrepository.com/artifact/org.apache.poi/poi-ooxml -->
		<dependency>
			<groupId>org.apache.poi</groupId>
			<artifactId>poi-ooxml</artifactId>
			<version>4.1.0</version>
		</dependency>

		<!-- https://mvnrepository.com/artifact/mysql/mysql-connector-java -->
		<dependency>
		<groupId>mysql</groupId>
		<artifactId>mysql-connector-java</artifactId>
		<version>8.0.18</version>
		</dependency>
		
		<!-- https://mvnrepository.com/artifact/org.apache.poi/poi-ooxml-schemas -->
		<dependency>
			<groupId>org.apache.poi</groupId>
			<artifactId>poi-ooxml-schemas</artifactId>
			<version>4.1.0</version>
		</dependency>
		<dependency>
			<groupId>com.oracle</groupId>
			<artifactId>ojdbc</artifactId>
			<scope>system</scope>
			<systemPath>${basedir}/src/test/resources/Drivers/ojdbc14.jar</systemPath>
			<!-- must match file name -->
		</dependency>
		<dependency>
			<groupId>com.jayway.jsonpath</groupId>
			<artifactId>json-path</artifactId>
			<version>2.4.0</version>
		</dependency>
		<!-- https://mvnrepository.com/artifact/org.json/json -->
		<dependency>
			<groupId>org.json</groupId>
			<artifactId>json</artifactId>
			<version>20180813</version>
		</dependency>
		<dependency>
			<groupId>org.apache.commons</groupId>
			<artifactId>commons-csv</artifactId>
			<version>1.6</version>
		</dependency>
		<dependency>
			<groupId>io.rest-assured</groupId>
			<artifactId>rest-assured</artifactId>
			<version>3.2.0</version>
		</dependency>
		<dependency>
			<groupId>com.jcraft</groupId>
			<artifactId>jsch</artifactId>
			<version>0.1.53</version>
		</dependency>
		<dependency>
			<groupId>redis.clients</groupId>
			<artifactId>jedis</artifactId>
			<version>3.0.1</version>
		</dependency>
		<dependency>
			<groupId>io.appium</groupId>
			<artifactId>java-client</artifactId>
			<version>7.0.0</version>
		</dependency>
		<!-- https://mvnrepository.com/artifact/org.zeroturnaround/zt-zip -->
		<dependency>
			<groupId>org.zeroturnaround</groupId>
			<artifactId>zt-zip</artifactId>
			<version>1.14</version>
		</dependency>
	</dependencies>
	<build>
		<plugins>
			<plugin>
					<artifactId>maven-surefire-plugin</artifactId>
				<version>3.0.0-M3</version>
				<configuration>
					<systemPropertyVariables>
						<environment>${TestEnv}</environment>
						<brand>${testXml}</brand>
						<testType>${testType}</testType>
						<browser>${browserName}</browser>
						<qtest>${qtestFlag}</qtest>
					</systemPropertyVariables>
					<groups>${groupName}</groups>
					<suiteXmlFiles>
						<suiteXmlFile>
							${basedir}/src/test/resources/testng/${testXml}.xml
						</suiteXmlFile>
					</suiteXmlFiles>
					<!-- <reportsDirectory>src/test/reports-outputs</reportsDirectory> -->
				</configuration>
			</plugin>
			<plugin>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>3.8.0</version>
				<configuration>
					<source>1.8</source>
					<target>1.8</target>
				</configuration>
			</plugin>
		</plugins>
	</build>
	<dependencyManagement>
		<dependencies>
			<dependency>
				<groupId>com.oracle</groupId>
				<artifactId>ojdbc</artifactId>
				<version>14</version>
			</dependency>
		</dependencies>
	</dependencyManagement>
</project>

--- Usefull dependencies

package com.shopify.webAutomation.dao;

import static org.testng.Assert.assertEquals;
import static org.testng.Assert.assertTrue;

import java.awt.Robot;
import java.awt.Toolkit;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.StringSelection;
import java.awt.event.KeyEvent;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileReader;
import java.io.IOException;
import java.io.Reader;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Vector;
import java.util.Properties;
import java.util.Set;
import java.util.TimeZone;
import java.util.concurrent.TimeUnit;

import org.apache.commons.csv.CSVFormat;
import org.apache.log4j.Logger;
import org.openqa.selenium.Alert;
import org.openqa.selenium.By;
import org.openqa.selenium.Dimension;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.OutputType;
import org.openqa.selenium.TakesScreenshot;
import org.openqa.selenium.TimeoutException;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.support.PageFactory;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.Select;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.testng.Reporter;
import org.apache.commons.csv.CSVParser;
import org.apache.commons.csv.CSVRecord;
import org.apache.commons.io.FileUtils;

import com.aventstack.extentreports.ExtentTest;
import com.aventstack.extentreports.Status;
import com.aventstack.extentreports.markuputils.Markup;
import com.aventstack.extentreports.markuputils.MarkupHelper;
import com.jcraft.jsch.Channel;
import com.jcraft.jsch.ChannelSftp;
import com.jcraft.jsch.ChannelSftp.LsEntry;
import com.shopify.webAutomation.common.DBConnections;
import com.shopify.webAutomation.common.Log4jUtil;
import com.shopify.webAutomation.common.ReadData;
import com.shopify.webAutomation.controllers.DriverManager;
import com.shopify.webAutomation.controllers.SetUpTest;
import com.shopify.webAutomation.objectRepository.ShopifyLocators;
import com.shopify.webAutomation.utils.CommonUtilities;
import com.jcraft.jsch.JSch;
import com.jcraft.jsch.JSchException;
import com.jcraft.jsch.Session;
import com.jcraft.jsch.SftpException;

import io.restassured.response.Response;

public class ShopifyDAO extends SetUpTest {

	private WebDriver driverInstance;
	private ShopifyLocators shopifyLocators;
	public JavascriptExecutor js;
	private ReadData rd;
	private DBConnections db;
	private CommonUtilities commonUtilities;
	private String scenario;
	private ExtentTest extLogger;
	private String testScenario;
	private Map<Object, String> testData;
	private String directory;

	static Logger log = Log4jUtil.loadLogger(ShopifyDAO.class);
	ArrayList<String> tabs;

	public ShopifyDAO(String scenario, Map<Object, String> testData) {
		this.driverInstance = DriverManager.getDriver();
		this.shopifyLocators = PageFactory.initElements(driverInstance, ShopifyLocators.class);
		this.js = (JavascriptExecutor) driverInstance;
		this.rd = new ReadData();
		this.db = SetUpTest.db;
		log.info("db instance in Dao " + this.db);
		this.scenario = scenario;
		this.testData = testData;
		this.extLogger = (ExtentTest) Reporter.getCurrentTestResult().getTestContext()
				.getAttribute("extLogger" + Thread.currentThread().hashCode());
		this.commonUtilities = new CommonUtilities(scenario);
	}

	public void shopifyLogin(Map<Object, String> testData) throws Exception {
		String strUserName = rd.get("ShopifyAdminUserName");
		String strPassword = rd.get("ShopifyPassword");
		extLogger.log(Status.INFO, "Opening Shopify URL and logging into the apllication");
		commonUtilities.type(shopifyLocators.shopifyAdminUserName, "shopifyAdminUserName", strUserName);
//		commonUtilities.click(shopifyLocators.nextBtn);
//		commonUtilities.addScreenshotToStep("");
//		commonUtilities.type(shopifyLocators.shopifyAdminPassword, "shopifyAdminPassword", strPassword, true);
//		commonUtilities.click(shopifyLocators.nextBtn);
//		commonUtilities.addScreenshotToStep("");
		Thread.sleep(20000);
//		if (driverInstance.getTitle().equalsIgnoreCase("Pega Dev Studio")) {
//			log.info("Logged into the Pega application successfully");
//			extLogger.log(Status.INFO, "Logged into the Pega application successfully");
////			extLogger.pass("Login successful");
//			driverInstance.manage().window().maximize();
//			Dimension d = new Dimension(1382, 744);  //(x,y coordinators in pixels) 
//			driverInstance.manage().window().setSize(d);
//			return true;
//		} else {
//			extLogger.fail("Login failed");
//			return false;
//		}

	}

	public String shopifyStore(Map<Object, String> testData) throws Exception {
		String oderNumber="";
		extLogger.log(Status.INFO, "Opening Shopify URL and logging into the apllication");
		String url = testData.get("URL");
		driverInstance.get(url);
		commonUtilities.waitForPageLoad();
		commonUtilities.selectFromDDByIndex(shopifyLocators.productSize, 0);
		commonUtilities.addScreenshotToStep("");
		commonUtilities.click(shopifyLocators.addToCart);
		commonUtilities.waitForElement(shopifyLocators.viewMyCart);
		commonUtilities.addScreenshotToStep("");
		commonUtilities.click(shopifyLocators.viewMyCart);
		commonUtilities.waitForElement(shopifyLocators.updateCart);
		commonUtilities.addScreenshotToStep("");
		commonUtilities.click(shopifyLocators.updateCart);
		Thread.sleep(3000);
		commonUtilities.addScreenshotToStep("");
		commonUtilities.JSClick(shopifyLocators.proceedToCheckout);
		commonUtilities.waitForElement(shopifyLocators.customerEmail);
		commonUtilities.addScreenshotToStep("");
		commonUtilities.type(shopifyLocators.customerEmail, "customerEmail", testData.get("CustomerEmail"));
		commonUtilities.type(shopifyLocators.shippingFirstName, "shippingFirstName", testData.get("FirstName"));
		commonUtilities.type(shopifyLocators.shippingLastName, "shippingLastName", testData.get("LastName"));
		commonUtilities.type(shopifyLocators.shippingAddress, "shippingAddress", testData.get("ShippingAddress"));
		commonUtilities.click(shopifyLocators.shippingLastName);
		commonUtilities.type(shopifyLocators.shippingCity, "shippingCity", testData.get("ShippingCity"));
		commonUtilities.selectFromDDByText(shopifyLocators.shippingCountry, testData.get("ShippingCountry"));
		commonUtilities.selectFromDDByText(shopifyLocators.shippingTerritory, testData.get("ShippingTerritory"));
		
		commonUtilities.type(shopifyLocators.shippingPostCode, "shippingPostCode", testData.get("ShippingPostCode"));
		commonUtilities.type(shopifyLocators.shippingPhone, "shippingPhone", testData.get("ShippingPhone"));
		commonUtilities.addScreenshotToStep("");
		Thread.sleep(3000);
		commonUtilities.click(shopifyLocators.continueToShip);
		commonUtilities.addScreenshotToStep("");
		Thread.sleep(3000);
		commonUtilities.click(shopifyLocators.continueToPayment);
//		commonUtilities.pageRefresh();
		Thread.sleep(3000);
		driverInstance.switchTo().frame(1);
		Thread.sleep(3000);
		commonUtilities.Shoptype(shopifyLocators.creditCardNumber, "creditCardNumber"," 4242424242424242");
		driverInstance.switchTo().defaultContent();
		driverInstance.switchTo().frame(2);
		commonUtilities.type(shopifyLocators.nameOnCard, "nameOnCard", rd.get("nameOnCard"));
		driverInstance.switchTo().defaultContent();
		driverInstance.switchTo().frame(3);
		Thread.sleep(3000);
		commonUtilities.Shoptype(shopifyLocators.cardExpirationDate, "cardExpirationDate", "12/21");
		driverInstance.switchTo().defaultContent();
		driverInstance.switchTo().frame(4);
		commonUtilities.type(shopifyLocators.cardSecurityCode, "cardSecurityCode", rd.get("cardSecurityCode"));
		driverInstance.switchTo().defaultContent();
		commonUtilities.click(shopifyLocators.sameAsBilling);
		Thread.sleep(3000);
		commonUtilities.addScreenshotToStep("");
		commonUtilities.click(shopifyLocators.payNow);
		Thread.sleep(5000);
		commonUtilities.waitForElement(shopifyLocators.orderNumber);
		oderNumber=commonUtilities.getElementText(shopifyLocators.orderNumber, "OrderNumber");
		commonUtilities.addScreenshotToStep("");
		log.info(oderNumber);
		
		return oderNumber;
	}
	
	public void OS6OrderVerify(Map<Object, String> testData) throws Exception {
		extLogger.log(Status.INFO, "Opening OS6 URL and logging into the apllication");
		String url = testData.get("URL");
		driverInstance.get(url);
		commonUtilities.waitForPageLoad();
		commonUtilities.type(shopifyLocators.email, "OS6 Login Email", testData.get("Email"));
		commonUtilities.type(shopifyLocators.password, "OS6 Login Password", testData.get("Password"));
		commonUtilities.addScreenshotToStep("");
		commonUtilities.click(shopifyLocators.os6Login);
//		commonUtilities.pageRefresh();
		Thread.sleep(3000);
		commonUtilities.click(shopifyLocators.ordersLink);
		commonUtilities.click(shopifyLocators.ordersSubLink);
		commonUtilities.type(shopifyLocators.os6OrderSearch, "Shopify store order search in OS6", testData.get("OrderNumber"));
		Thread.sleep(3000);
		commonUtilities.addScreenshotToStep("");
	}
	}

		
		------------ XXXDAO----
		
		
		package com.shopify.webAutomation.scenarios;

import static org.testng.Assert.assertEquals;
import static org.testng.Assert.assertTrue;

import java.io.FileInputStream;
import java.io.IOException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Properties;
import java.util.TimeZone;

import org.openqa.selenium.WebDriver;
import org.testng.Reporter;
import org.testng.asserts.SoftAssert;

import com.aventstack.extentreports.ExtentReports;
import com.aventstack.extentreports.ExtentTest;
import com.aventstack.extentreports.Status;
import com.shopify.webAutomation.common.DBConnections;
import com.shopify.webAutomation.common.ReadData;
import com.shopify.webAutomation.controllers.SetUpTest;
import com.shopify.webAutomation.dao.ShopifyDAO;
import com.shopify.webAutomation.extentReport.ExtentFactory;


public class ShopifyScenarios extends SetUpTest {

	private List<String> minDetails = new ArrayList<>();
	private String testScenario;
	private static List<String> t3ciListTimeStamp = new ArrayList<>();
	private static List<String> kafkaQueStatus = new ArrayList<>();
	private static int i=0;
	private WebDriver driverInstance;
	private ShopifyDAO sdProps;
	
	public synchronized ShopifyDAO getShopifyProps(String scenario, Map<Object, String> testData) throws Exception {
		this.sdProps = new ShopifyDAO(scenario, testData);
		return sdProps;
	}
	
	public void shopifyLogin(Map<Object, String> testData) throws Exception {
		String testCase = testData.get("TestCaseID") + "-" + scenarioName +"-";
		log.info("Test Case :" + testCase);
		String testScenario = testCase + new SimpleDateFormat("yyyy.MM.dd.HH.mm.ss").format(new Date());
		setExtentlog(testData, testScenario);
		ShopifyDAO sdProps = getShopifyProps(testScenario, testData);
		log.info("Shopify Login");
		sdProps.shopifyLogin(testData);
		
	}
	public String shopifyStore(Map<Object, String> testData) throws Exception {
		String oderNumber="";
		String testCase = testData.get("TestCaseID") + "-" + scenarioName +"-";
		log.info("Test Case :" + testCase);
		String testScenario = testCase + new SimpleDateFormat("yyyy.MM.dd.HH.mm.ss").format(new Date());
		setExtentlog(testData, testScenario);
		ShopifyDAO sdProps = getShopifyProps(testScenario, testData);
		log.info("Shopify Login");
		oderNumber=sdProps.shopifyStore(testData);
		return oderNumber;
		
	}
	

	public String OS6OrderVerify(Map<Object, String> testData,String OrderNumberValue) throws Exception {

		String testCase = testData.get("TestCaseID") + "-" + scenarioName +"-";
		log.info("Test Case :" + testCase);
		String testScenario = testCase + new SimpleDateFormat("yyyy.MM.dd.HH.mm.ss").format(new Date());
		setExtentlog(testData, testScenario);
		ShopifyDAO sdProps = getShopifyProps(testScenario, testData);
		log.info("OS6 Login");
		sdProps.OS6OrderVerify(testData);
		return OrderNumberValue; 
		
	}
	public synchronized void setExtentlog(Map<Object, String> testData, String scenario) {
		try {
			ExtentFactory extentFactory = new ExtentFactory();
			ExtentReports extentReport = extentFactory.getInstance(scenario);
			Reporter.getCurrentTestResult().getTestContext()
			.setAttribute("extentReport" + Thread.currentThread().hashCode(), extentReport);
			ExtentTest extlogger = extentReport
					.createTest(scenario.substring(0, scenario.length() - 19) + "--" + strBrand);
			extlogger.assignCategory((String) Reporter.getCurrentTestResult().getTestContext()
					.getAttribute("methodName" + Thread.currentThread().hashCode()));
			Reporter.getCurrentTestResult().getTestContext()
			.setAttribute("extLogger" + Thread.currentThread().hashCode(), extlogger);

		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	
}
		
		
		-------XXXScenarios
		
		
		package com.shopify.automation.web;

import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.Map;
import java.util.TimeZone;

import org.apache.log4j.Logger;
import org.testng.ITestContext;
import org.testng.annotations.BeforeMethod;
import org.testng.annotations.Parameters;
import org.testng.annotations.Test;
import org.testng.asserts.SoftAssert;

import com.aventstack.extentreports.ExtentTest;
import com.shopify.webAutomation.common.Log4jUtil;
import com.shopify.webAutomation.common.ReadData;
import com.shopify.webAutomation.scenarios.ShopifyScenarios;


public class ShopifyTest extends ReadData
{
	private Map<Object, String> testData;
	private String testScenario;
	Logger log = Log4jUtil.loadLogger(ShopifyTest.class);
	List<String> minIHDetails = new ArrayList<>();
	private ShopifyScenarios ss;
	SoftAssert sa = new SoftAssert();
	String orderNumber="";
	@BeforeMethod(alwaysRun = true)
	public void intialiseObject() throws Exception {
		ss = new ShopifyScenarios();
	}
	
	@Test(dataProvider = "getCSVDataReader", groups= {"Smoke", "Regression"})
	public void shopifyLogin(Map<Object, String> testDataVal) throws IOException, Exception 
	{
		//TC_RTE_01 Login into the shopify admin page
		ss.shopifyLogin(testDataVal);
	}
	@Test(dataProvider = "getCSVDataReader", groups= {"Test"}, priority=1)
	public void shopifyStore(Map<Object, String> testDataVal) throws IOException, Exception 
	{
		//TC_RTE_02 order from shopify store
		orderNumber = ss.shopifyStore(testDataVal);
	}
	
	@Test(dataProvider = "getCSVDataReader", groups= {"Smoke"},priority=2)
	public void OS6OrderVerify(Map<Object, String> testDataVal) throws IOException, Exception 
	{
		//TC_RTE_03 verify Shopify store order from OS6
		ss.OS6OrderVerify(testDataVal,orderNumber);
	}
	
	@Test(dataProvider = "getCSVDataReader", groups= {"Smoke"}, priority=1)
	public void shopifyStoreUS(Map<Object, String> testDataVal) throws IOException, Exception 
	{
		//TC_RTE_02 order from shopify store
		orderNumber = ss.shopifyStore(testDataVal);
	}
	
}


		---- XXXTest
